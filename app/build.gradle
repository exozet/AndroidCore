ext {
    versionName = CORE_VERSION_NAME
    VSC = CORE_VSC_PATH
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
//apply plugin: 'com.github.gfx.ribbonizer'
apply plugin: 'build-time-tracker'
apply plugin: 'img-optimizer'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'realm-android'

android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        applicationId CORE_APPLICATION_ID
        multiDexEnabled true

        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode commitCount()
        versionName simpleReleaseVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        buildConfigField "String", "SIMPLE_VERSION_NAME", escape(isCi ? simpleReleaseVersionName() : "")
        buildConfigField "String", "CANONICAL_VERSION_NAME", escape(isCi ? canonicalReleaseVersionName() : "")
        buildConfigField "String", "COMMIT_HASH", escape(isCi ? commitHash() : "")
        buildConfigField "String", "BRANCH", escape(isCi ? branchNameByGit() : "")
        buildConfigField "String", "BUILD_DATE", escape(isCi ? new Date().getTime() : 0)
        buildConfigField "String", "VSC", escape(isCi ? VSC_PATH : "")
    }

    signingConfigs {
        try {
            debug {
                storeFile file(CORE_DEBUG_KEYSYORE_PATH)
                storePassword CORE_DEBUG_STORE_PASSWORD
                keyAlias CORE_DEBUG_KEYSTORE_ALLIAS
                keyPassword CORE_DEBUG_KEY_PASSWORD
            }
        }
        catch (final ignored) {
            throw new InvalidUserDataException('You should define DEBUG_KEYSTORE_ALLIAS, DEBUG_STORE_PASSWORD, DEBUG_KEY_PASSWORD in gradle.properties.')
        }
        try {
            release {
                storeFile file(CORE_RELEASE_KEYSYORE_PATH)
                storePassword CORE_RELEASE_STORE_PASSWORD
                keyAlias CORE_RELEASE_KEYSTORE_ALIAS
                keyPassword CORE_RELEASE_KEY_PASSWORD
            }
        } catch (final ignored) {
            throw new InvalidUserDataException('You should define RELEASE_KEYSTORE_ALIAS, RELEASE_STORE_PASSWORD, RELEASE_KEY_PASSWORD in gradle.properties.')
        }
    }

    buildTypes {

        debug {
            signingConfig signingConfigs.debug
            pseudoLocalesEnabled false
            debuggable true
            minifyEnabled false
            crunchPngs false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            initWith(buildTypes.debug)
            applicationIdSuffix ""
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled false
            crunchPngs false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    realm {
        kotlinExtensionsEnabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // region test options

    testOptions {
        unitTests.all {
            jvmArgs '-noverify'
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
            ignoreFailures = true
        }
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    // region lint options

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false        // true by default
        checkAllWarnings false
        checkReleaseBuilds false
        ignoreWarnings true       // false by default
        quiet true                // false by default
    }

    // endregion

    // region exclude duplicated meta inf files

    packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/services/javax.annotation.processing.Processor'  // butterknife
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/app_debug.kotlin_module'

    }

    // endregion
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation libs.supportMultidex

    androidTestImplementation androidTestLibs.espressoRunner
    androidTestImplementation androidTestLibs.espressoCore

    testImplementation testLibs.junit
    testImplementation testLibs.jsonUnit
    testImplementation testLibs.jsonUnitFluent
    testImplementation testLibs.robolectric
    testImplementation testLibs.truth

    implementation libs.kotlinJdk8
    implementation libs.supportAppCompat
    implementation libs.supportDesign
    implementation libs.supportCardView
    implementation libs.constraintLayout

    implementation libs.rx2java
    implementation libs.rx2Android

    implementation project(':core')
    implementation libs.logger
    implementation libs.timberLogger

    implementation libs.recyclerViewPresenter
    implementation libs.lifecycleExtensions
    implementation libs.realmExtensions
}

// region override support library version

configurations.all {

    resolutionStrategy.force libs.supportMultidex
    resolutionStrategy.force libs.supportCompat
    resolutionStrategy.force libs.supportMediaCompat
    resolutionStrategy.force libs.supportFragment
    resolutionStrategy.force libs.supportAppCompat
    resolutionStrategy.force libs.supportCardView
    resolutionStrategy.force libs.supportGridLayout
    resolutionStrategy.force libs.supportMediaRouter
    resolutionStrategy.force libs.supportPalette
    resolutionStrategy.force libs.supportRecyclerview
    resolutionStrategy.force libs.supportPreferenceV7
    resolutionStrategy.force libs.supportPreferenceV14
    resolutionStrategy.force libs.supportV13
    resolutionStrategy.force libs.supportV4
    resolutionStrategy.force libs.supportPreferenceLeanback
    resolutionStrategy.force libs.supportLeanback
    resolutionStrategy.force libs.supportVectorDrawable
    resolutionStrategy.force libs.supportAnimatedVectorDrawable
    resolutionStrategy.force libs.supportAnnotations
    resolutionStrategy.force libs.supportDesign
    resolutionStrategy.force libs.supportCustomTabs
    resolutionStrategy.force libs.supportPercent
    resolutionStrategy.force libs.supportExifInterface
    resolutionStrategy.force libs.supportRecommendation
    resolutionStrategy.force libs.supportWear
    resolutionStrategy.force libs.constraintLayoutSolver
    resolutionStrategy.force libs.constraintLayout

    resolutionStrategy.force libs.lifecycleRuntime

    resolutionStrategy.force libs.playServicesPlus
    resolutionStrategy.force libs.playServicesAuth
    resolutionStrategy.force libs.playServicesBase
    resolutionStrategy.force libs.playServicesIdentity
    resolutionStrategy.force libs.playServicesAnalytics
    resolutionStrategy.force libs.playServicesAwareness
    resolutionStrategy.force libs.playServicesCast
    resolutionStrategy.force libs.playServicesGcm
    resolutionStrategy.force libs.playServicesDrive
    resolutionStrategy.force libs.playServicesFitness
    resolutionStrategy.force libs.playServicesLocation
    resolutionStrategy.force libs.playServicesMaps
    resolutionStrategy.force libs.playServicesAds
    resolutionStrategy.force libs.playServicesPlaces
    resolutionStrategy.force libs.playServicesVision
    resolutionStrategy.force libs.playServicesNearby
    resolutionStrategy.force libs.playServicesPanorama
    resolutionStrategy.force libs.playServicesGames
    resolutionStrategy.force libs.playServicesSafetynet
    resolutionStrategy.force libs.playServicesWallet
    resolutionStrategy.force libs.playServicesWearable

    resolutionStrategy.force libs.firebaseIid
    resolutionStrategy.force libs.firebaseCommon
    resolutionStrategy.force libs.firebaseCore
    resolutionStrategy.force libs.firebaseDatabase
    resolutionStrategy.force libs.firebaseFirestore
    resolutionStrategy.force libs.firebaseStorage
    resolutionStrategy.force libs.firebaseCrash
    resolutionStrategy.force libs.firebaseAuth
    resolutionStrategy.force libs.firebaseMessaging
    resolutionStrategy.force libs.firebaseConfig
    resolutionStrategy.force libs.firebaseInvites
    resolutionStrategy.force libs.firebaseAds
    resolutionStrategy.force libs.firebaseAppindexing
    resolutionStrategy.force libs.firebasePerf
//    resolutionStrategy.force libs.firebaseFunctions
    resolutionStrategy.force libs.firebaseMlVision
    resolutionStrategy.force libs.firebaseMlModelInterpreter

    resolutionStrategy.force libs.butterknifeX
    resolutionStrategy.force libs.butterknifeCompilerX
    resolutionStrategy.force libs.guava
}

// endregion

// region build time tracker

buildtimetracker {
    reporters {
        csv {
            output "build/times.csv"
            append true
            header false
        }

        summary {
            ordered false
            threshold 50
            barstyle "unicode"
        }

        csvSummary {
            csv "build/times.csv"
        }
    }
}

// endregion

static def escape(Object value) {
    return "\"$value\""
}

apply plugin: 'com.google.gms.google-services'