import java.security.spec.InvalidKeySpecException

ext {
    versionName = VERSION_NAME
    VERSION_CODE = 1
    VSC = VSC_PATH
    isCi = true
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'

android {

    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        applicationId APPLICATION_ID
        multiDexEnabled true

        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode commitCount()
        versionName simpleReleaseVersionName()
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        buildConfigField "String", "SIMPLE_VERSION_NAME", escape(isCi ? simpleReleaseVersionName() : "")
        buildConfigField "String", "CANONICAL_VERSION_NAME", escape(isCi ? canonicalReleaseVersionName() : "")
        buildConfigField "String", "COMMIT_HASH", escape(isCi ? commitHash() : "")
        buildConfigField "String", "BRANCH", escape(isCi ? branchNameByGit() : "")
        buildConfigField "String", "BUILD_DATE", escape(isCi ? new Date().getTime() : 0)
        buildConfigField "String", "VSC", escape(isCi ? VSC_PATH : "")
    }
    signingConfigs {
        try {
            debug {
                storeFile file(DEBUG_KEYSYORE_PATH)
                storePassword DEBUG_STORE_PASSWORD
                keyAlias DEBUG_KEYSTORE_ALLIAS
                keyPassword DEBUG_KEY_PASSWORD
            }
        }
        catch (final ignored) {
            throw new InvalidKeySpecException('You should define DEBUG_KEYSTORE_ALLIAS, DEBUG_STORE_PASSWORD, DEBUG_KEY_PASSWORD in gradle.properties.')
        }
        try {
            release {
                storeFile file(RELEASE_KEYSYORE_PATH)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEYSTORE_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        } catch (final ignored) {
            throw new InvalidKeySpecException('You should define RELEASE_KEYSTORE_ALIAS, RELEASE_STORE_PASSWORD, RELEASE_KEY_PASSWORD in gradle.properties.')
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            pseudoLocalesEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled false
            shrinkResources = false
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    realm {
        kotlinExtensionsEnabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // region test options

    testOptions {
        unitTests.all {
            jvmArgs '-noverify'
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
            ignoreFailures = true
        }
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }

    // region compile options

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // endregion

    // region lint options

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false        // true by default
        checkAllWarnings false
        checkReleaseBuilds false
        ignoreWarnings true       // false by default
        quiet true                // false by default
        tasks.lint.enabled = false
    }

    // endregion

    // region dex options

    dexOptions {
        javaMaxHeapSize "4g"
        maxProcessCount 8
    }

    // endregion

    // region adb options

    adbOptions {
        timeOutInMs 10 * 60 * 1000 // 10 minutes
    }

    // endregion

    // region exclude duplicated meta inf files

    packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/app_debug.kotlin_module'
        exclude 'META-INF/library-core_release.kotlin_module'
    }

    // endregion
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation libs.supportMultidex

    // Core library
    androidTestImplementation androidTestLibs.testCore

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation androidTestLibs.espressoRunner
    androidTestImplementation androidTestLibs.espressoRules
    androidTestUtil androidTestUtilLibs.orchestrator

    // Assertions
    androidTestImplementation androidTestLibs.testJUnit
    androidTestImplementation androidTestLibs.textTruth
    androidTestImplementation androidTestLibs.truth

    // Espresso dependencies
    androidTestImplementation androidTestLibs.espressoCore
    androidTestImplementation androidTestLibs.espressoContrib
    androidTestImplementation androidTestLibs.espressoIntents
    androidTestImplementation androidTestLibs.espressoAccessibility
    androidTestImplementation androidTestLibs.espressoWeb
    androidTestImplementation androidTestLibs.idlingConcurrent
    androidTestImplementation androidTestLibs.espressoIdlingResource

    androidTestImplementation androidTestLibs.fragmentTesting

    testImplementation testLibs.junit
    testImplementation testLibs.jsonUnit
    testImplementation testLibs.jsonUnitFluent
    testImplementation testLibs.robolectric
    testImplementation testLibs.truth
    testImplementation androidTestLibs.testCore

    implementation libs.supportMultidex
    implementation libs.supportAppCompat
    implementation libs.appCompatResources
    implementation libs.constraintLayout
    implementation libs.supportCardView
    implementation libs.supportRecyclerview

    implementation libs.androidKtx
    implementation libs.androidKtxFragment
    implementation libs.androidKtxCollection

    implementation project(':core')
    implementation libs.logger
    implementation libs.timberLogger
    implementation libs.parceler
    kapt libs.parcelerProcessor

    implementation libs.recyclerViewPresenter
    implementation libs.lifecycleExtensions
    implementation libs.gson

    implementation libs.rx2java
    implementation libs.rx2Android
    implementation libs.retrofitAdapterRxJava2
    implementation libs.retrofit
    implementation libs.connectionBuddy
    implementation libs.googlePlayForceUpdate
    implementation libs.permissionDispatcher
    implementation libs.timeBomb
    implementation libs.playServicesAuth
    implementation libs.firebaseDatabase
    implementation libs.firebaseMessaging
    implementation libs.firebaseJobdispatcher
    implementation libs.apacheCommonsIo
    implementation libs.realmExtensions
}

// region override support library version

configurations.all {

    resolutionStrategy.cacheDynamicVersionsFor 10, 'minutes'

    resolutionStrategy.force libs.supportMediaCompat
    resolutionStrategy.force libs.supportFragment
    resolutionStrategy.force libs.fragmentKtx
    resolutionStrategy.force libs.supportActivity
    resolutionStrategy.force libs.activityKtx
    resolutionStrategy.force libs.supportAppCompat
    resolutionStrategy.force libs.appCompatResources
    resolutionStrategy.force libs.supportCardView
    resolutionStrategy.force libs.supportGridLayout
    resolutionStrategy.force libs.supportMediaRouter
    resolutionStrategy.force libs.supportPalette
    resolutionStrategy.force libs.supportRecyclerview
    resolutionStrategy.force libs.supportPreferenceV7
    resolutionStrategy.force libs.supportPreferenceV14
    resolutionStrategy.force libs.supportV13
    resolutionStrategy.force libs.supportV4
    resolutionStrategy.force libs.supportPreferenceLeanback
    resolutionStrategy.force libs.supportLeanback
    resolutionStrategy.force libs.supportVectorDrawable
    resolutionStrategy.force libs.supportAnimatedVectorDrawable
    resolutionStrategy.force libs.supportAnnotations
    resolutionStrategy.force libs.supportDesign
    resolutionStrategy.force libs.supportCustomTabs
    resolutionStrategy.force libs.supportPercent
    resolutionStrategy.force libs.supportExifInterface
    resolutionStrategy.force libs.supportRecommendation
    resolutionStrategy.force libs.supportWear

    resolutionStrategy.force libs.lifecycleRuntime

    resolutionStrategy.force libs.playServicesPlus
    resolutionStrategy.force libs.playServicesAuth
    resolutionStrategy.force libs.playServicesBase
    resolutionStrategy.force libs.playServicesIdentity
    resolutionStrategy.force libs.playServicesAnalytics
    resolutionStrategy.force libs.playServicesAwareness
    resolutionStrategy.force libs.playServicesCast
    resolutionStrategy.force libs.playServicesGcm
    resolutionStrategy.force libs.playServicesDrive
    resolutionStrategy.force libs.playServicesFitness
    resolutionStrategy.force libs.playServicesLocation
    resolutionStrategy.force libs.playServicesMaps
    resolutionStrategy.force libs.playServicesAds
    resolutionStrategy.force libs.playServicesPlaces
    resolutionStrategy.force libs.playServicesVision
    resolutionStrategy.force libs.playServicesNearby
    resolutionStrategy.force libs.playServicesPanorama
    resolutionStrategy.force libs.playServicesGames
    resolutionStrategy.force libs.playServicesSafetynet
    resolutionStrategy.force libs.playServicesWallet
    resolutionStrategy.force libs.playServicesWearable

    resolutionStrategy.force libs.firebaseIid
    resolutionStrategy.force libs.firebaseCommon
    resolutionStrategy.force libs.firebaseCore
    resolutionStrategy.force libs.firebaseDatabase
    resolutionStrategy.force libs.firebaseFirestore
    resolutionStrategy.force libs.firebaseStorage
    resolutionStrategy.force libs.firebaseCrash
    resolutionStrategy.force libs.firebaseAuth
    resolutionStrategy.force libs.firebaseMessaging
    resolutionStrategy.force libs.firebaseConfig
    resolutionStrategy.force libs.firebaseInvites
    resolutionStrategy.force libs.firebaseAds
    resolutionStrategy.force libs.firebaseAppindexing
    resolutionStrategy.force libs.firebasePerf
    resolutionStrategy.force libs.firebaseFunctions
    resolutionStrategy.force libs.firebaseMlVision
    resolutionStrategy.force libs.firebaseMlModelInterpreter
}

// endregion

static def escape(Object value) {
    return "\"$value\""
}


task copyReadme(type: Copy) {
    from "${project.rootDir}/README.md"
    into "${project.rootDir}/app/src/main/assets"
}

task('generateChangelogTask') {
    generateChangelog()
}

task updateLocalization(type: Exec) {
    commandLine 'bash', './updateLocalization.sh'
}

preBuild.dependsOn generateChangelogTask
preBuild.dependsOn copyReadme
//preBuild.dependsOn updateLocalization

apply plugin: 'com.google.gms.google-services'